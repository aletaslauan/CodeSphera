package templates

// login.templ
templ LoginPage() {
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>HTMX + Go Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://unpkg.com/htmx.org@1.9.2"></script>
</head>
<body class="d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4 shadow-sm" style="width:350px;">
        <h3 class="mb-3 text-center">Login</h3>
        <form
            id="login-form"
            hx-post="/login"
            hx-target="#response"
            hx-swap="innerHTML"
            class="needs-validation"
            novalidate>
            <div id="response" class="mb-3"></div>

            <div class="mb-3">
                <label class="form-label">Username</label>
                <input type="text" name="username" class="form-control" required>
                <div class="invalid-feedback">Please enter a valid username.</div>
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <input type="password" name="password" class="form-control" required>
                <div class="invalid-feedback">Please enter your password.</div>
            </div>

            <button class="btn btn-primary w-100">Login</button>
        </form>

        <div class="mt-3 text-center">
            <a href="/register" class="link-primary">Don't have an account? Register</a>
        </div>
    </div>

    <script>
        (function(){
            'use strict';
            let form = document.getElementById('login-form');

            form.addEventListener('submit', function(e) {
                if (!form.checkValidity()) {
                    e.preventDefault(); e.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);

            form.addEventListener('htmx:beforeSend', function(evt) {
                const inputs = form.querySelectorAll('input');
                inputs.forEach(input => {
                    input.classList.remove('is-valid', 'is-invalid');
                    if (input.nextElementSibling) {
                        input.nextElementSibling.textContent = '';
                    }
                });
            });

            form.addEventListener('htmx:afterSwap', function(evt) {
                if (evt.detail.target.id === 'response') {
                    const usernameInput = form.querySelector('[name=username]');
                    const passwordInput = form.querySelector('[name=password]');

                    if (evt.detail.xhr.status === 401 || evt.detail.xhr.status === 400) {
                        usernameInput.classList.add('is-invalid');
                        passwordInput.classList.add('is-invalid');
                        if (usernameInput.nextElementSibling) {
                            usernameInput.nextElementSibling.textContent = "Incorrect username.";
                        }
                        if (passwordInput.nextElementSibling) {
                            passwordInput.nextElementSibling.textContent = "Incorrect password.";
                        }
                    }

                    const alert = document.querySelector('#response .alert');
                    if (alert) {
                        setTimeout(() => {
                            alert.classList.add('fade');
                            alert.classList.add('show');
                            setTimeout(() => {
                                alert.remove();
                            }, 1000);
                        }, 3000);
                    }
                }
            });
        })();
    </script>
</body>
</html>
}

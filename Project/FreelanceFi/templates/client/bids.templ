package templates

// Import necessary packages
import (
	"freelancefi/db" // *** REPLACE with actual path to db package ***
	"fmt"
	"strings"
	//"time" // Needed for CreatedAt formatting (assuming pgtype.Timestamptz)
)

// BidsPage renders the bids for a specific job
// currentUserID is needed to check if the viewer is the client
templ BidsPage(username string, currentUserID int32, job db.Job, bids []db.Bid) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<title>Bids for { job.Title } - FreelanceFi</title>
			<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
			<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet"/>
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
			<style>
				body { margin: 0; padding: 0; height: 100vh; }
				#profileDropdown::after { display: none; }
				#profileDropdown:focus { box-shadow: none; }
				.dropdown-menu.show { display: block; }
				.job-header {
					background-color: #f8f9fa;
					border: 1px solid #dee2e6;
					border-radius: .375rem;
					padding: 1rem;
					margin-bottom: 1.5rem;
				}
			</style>
		</head>
		<body class="bg-light">
			<!-- Top Navbar (Same as jobs.templ) -->
			<nav class="navbar navbar-expand-lg navbar-dark bg-dark shadow-sm border-bottom px-4 py-2 mb-0">
				// ... (navbar code remains the same) ...
				<div class="container-fluid">
					<a class="navbar-brand fw-bold text-white" href="/home" style="margin-right: 60px; font-size: 1.75rem;">FreelanceFi</a>
					<form class="d-flex" role="search">
						<div class="input-group" style="width: 450px; height: 44px;">
							<span class="input-group-text bg-white border-end-0 rounded-start-pill px-3"><i class="bi bi-search"></i></span>
							<input type="search" class="form-control border-start-0 rounded-end-pill px-3" placeholder="Search jobs..." aria-label="Search"/>
						</div>
					</form>
					<div class="d-flex align-items-center gap-3 ms-auto">
						<a href="/messages" class="text-white"><i class="bi bi-envelope fs-5"></i></a>
						<a href="/saved" class="text-white"><i class="bi bi-bookmark fs-5"></i></a>
						<a href="/notifications" class="text-white"><i class="bi bi-bell fs-5"></i></a>
						<div class="dropdown position-relative" id="profileDropdownWrapper">
							<button class="btn btn-outline-light rounded-circle text-uppercase fw-bold" type="button" id="profileDropdown" style="width: 40px; height: 40px;">
								if len(username) > 0 {
									{ strings.ToUpper(string(username[0])) }
								} else {
									{ "?" }
								}
							</button>
							<ul class="dropdown-menu position-absolute end-0 mt-2" aria-labelledby="profileDropdown" style="min-width: 180px;">
								<li><a class="dropdown-item" href="/profile"><i class="bi bi-person me-2"></i>Profile</a></li>
								<li><a class="dropdown-item" href="/settings"><i class="bi bi-gear me-2"></i>Settings</a></li>
								<li><hr class="dropdown-divider"/></li>
								<li><a class="dropdown-item text-danger" href="/logout"><i class="bi bi-box-arrow-right me-2"></i>Log out</a></li>
							</ul>
						</div>
					</div>
				</div>
			</nav>

			<!-- Layout: Sidebar + Main Content -->
			<div class="d-flex" style="height: calc(100vh - 64px);">
				<!-- Sidebar (Same as jobs.templ) -->
				<div class="bg-dark text-white d-flex flex-column p-3" style="width: 250px; flex-shrink: 0;">
					// ... (sidebar code remains the same) ...
					<ul class="nav flex-column mb-auto">
						<li class="nav-item mb-2"><a class="nav-link text-white" href="/home">Home</a></li>
						<li class="nav-item mb-2"><a class="nav-link text-white" href="/jobs">Jobs</a></li>
						<li class="nav-item mb-2"><a class="nav-link text-white" href="/mywork">My Work</a></li>
						<li class="nav-item mb-2"><a class="nav-link text-white" href="/finance">Finance</a></li>
					</ul>
					<div class="mt-4"><a class="btn btn-secondary w-100" href="/logout">Logout</a></div>
				</div>

				<!-- Main Content -->
				<div class="flex-grow-1 overflow-auto p-4">
					<h2 class="mb-1">Bids for: { job.Title }</h2>
					<div class="mb-4">
						<a href={ templ.SafeURL(fmt.Sprintf("/jobs/%d", job.ID)) } class="link-secondary small">Back to Job Details</a>
					</div>

					<div class="job-header">
						<h5>Job Details</h5>
						<p class="mb-1"><strong>Description:</strong>
							if job.Description != "" {
								{ job.Description }
							} else {
								{ "N/A" }
							}
						</p>
						<p class="mb-0">
							<strong>Budget:</strong>
							if job.BudgetMin.Valid || job.BudgetMax.Valid {
								{ fmt.Sprintf(" $%v - $%v", job.BudgetMin, job.BudgetMax) }
							} else {
								{ " Not specified" }
							}
						</p>
					</div>

					<h4 class="mb-3">Received Bids</h4>

					if len(bids) == 0 {
						<div class="alert alert-info" role="alert">
							No bids have been placed on this job yet.
						</div>
					} else {
						<div class="table-responsive">
							<table class="table table-striped table-hover">
								<thead>
									<tr>
										<th scope="col">Freelancer ID</th>
										<th scope="col">Amount</th>
										<th scope="col">Cover Letter</th>
										<th scope="col">Date Placed</th>
										<th scope="col">Status</th>
										if job.ClientID == currentUserID {
											<th scope="col">Actions</th>
										}
									</tr>
								</thead>
								<tbody>
									for _, bid := range bids {
										<tr>
											<td>{ fmt.Sprintf("%d", bid.FreelancerID) }</td>
											<td>
												if bid.Amount.Valid {
													{ fmt.Sprintf("$%v", bid.Amount) }
												} else {
													{ "N/A" }
												}
											</td>
											<td>
												if bid.CoverLetter.Valid && bid.CoverLetter.String != "" {
													{ bid.CoverLetter.String }
												} else {
													{ "-" }
												}
											</td>
											<td>
												// Assuming CreatedAt IS pgtype.Timestamptz
												if bid.CreatedAt.Valid {
													{ bid.CreatedAt.Time.Format("Jan 02, 2006 15:04") } // This uses time package
												} else {
													{ "N/A" }
												}
											</td>
											<td>
												// Fix: Treat bid.Status as string. Check if empty if desired.
												if bid.Status != "" {
													<span class={ GetStatusBadgeClass(bid.Status) }>{ bid.Status }</span>
												} else {
													{ "Unknown" }
												}
											</td>
											// --- Conditional Actions for Client ---
											if job.ClientID == currentUserID {
												<td>
													// Fix: Treat bid.Status as string
													if bid.Status == "pending" {
														<form method="POST" action={ templ.SafeURL(fmt.Sprintf("/bids/%d/accept", bid.ID)) } style="display: inline;">
															<button type="submit" class="btn btn-success btn-sm">Accept</button>
														</form>
													// Fix: Treat bid.Status as string
													} else if bid.Status == "accepted" {
														<span class="text-success fw-bold">Accepted</span>
													} else {
														<span class="text-muted small"></span>
													}
												</td>
											}
											// --- End Conditional Actions ---
										</tr>
									} // End of FOR loop
								</tbody>
							</table>
						</div>
					} // End of ELSE block (if bids exist)
				</div> // End of Main Content
			</div> // End of Layout flex container

			<!-- JS: Dropdown hover -->
			<script>
              document.addEventListener("DOMContentLoaded", function () { /* ... */ }); // Keep JS same
			</script>
		</body>
	</html>
} // End of BidsPage templ


// Helper function for status badges
func GetStatusBadgeClass(status string) string {
	switch strings.ToLower(status) {
	case "pending":
		return "badge bg-warning text-dark"
	case "accepted":
		return "badge bg-success"
	case "rejected":
		return "badge bg-danger"
	default:
		return "badge bg-secondary"
	}
}
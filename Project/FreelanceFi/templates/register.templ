package templates

templ RegisterPage() {
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>HTMX + Go Register</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://unpkg.com/htmx.org@1.9.2"></script>
</head>
<body class="d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4 shadow-sm" style="width:350px;">
        <h3 class="mb-3 text-center">Register</h3>
        <form
            id="register-form"
            hx-post="/register"
            hx-target="#response"
            hx-swap="innerHTML"
            class="needs-validation"
            novalidate>

            <div id="response" class="mb-3"></div>

            <div class="mb-3">
                <label class="form-label">Username</label>
                <input type="text" name="username" class="form-control" required>
                <div class="invalid-feedback">Please choose a username.</div>
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <input type="password" name="password" class="form-control" required>
                <div class="invalid-feedback">Please enter a password.</div>
            </div>

            <div class="mb-3">
                <label class="form-label d-block">Role</label>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="role" id="client" value="client" required>
                    <label class="form-check-label" for="client">
                        Client (I want to post tasks)
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="role" id="freelancer" value="freelancer" required>
                    <label class="form-check-label" for="freelancer">
                        Freelancer (I want to find gigs)
                    </label>
                </div>
                <div class="invalid-feedback">Please select a role.</div>
            </div>

            <button class="btn btn-success w-100">Register</button>
        </form>

        <div class="mt-3 text-center">
            <a href="/" class="link-primary">Already have an account? Login</a>
        </div>
    </div>

    <script>
        (function(){
            'use strict';
            let form = document.getElementById('register-form');

            form.addEventListener('submit', function(e) {
                if (!form.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);

            form.addEventListener('htmx:beforeSend', function(evt) {
    const inputs = form.querySelectorAll('input');
    inputs.forEach(input => {
        input.classList.remove('is-valid', 'is-invalid');
        const next = input.nextElementSibling;
        if (next && next.classList.contains('invalid-feedback')) {
            next.textContent = '';
        }
    });
});


            form.addEventListener('htmx:afterSwap', function(evt) {
                if (evt.detail.target.id === 'response') {
                    const usernameInput = form.querySelector('[name=username]');
                    const passwordInput = form.querySelector('[name=password]');
                    const roleInputs = form.querySelectorAll('[name=role]');

                    if (evt.detail.xhr.status === 400 || evt.detail.xhr.status === 409) {
                        if (evt.detail.xhr.response.includes('Username')) {
                            usernameInput.classList.add('is-invalid');
                        }
                        if (evt.detail.xhr.response.includes('Password')) {
                            passwordInput.classList.add('is-invalid');
                        }
                        if (evt.detail.xhr.response.includes('Role')) {
                            roleInputs.forEach(input => input.classList.add('is-invalid'));
                        }
                    }

                    const alert = document.querySelector('#response .alert');
                    if (alert) {
                        setTimeout(() => {
                            alert.classList.add('fade');
                            alert.classList.add('show');
                            setTimeout(() => {
                                alert.remove();
                            }, 1000);
                        }, 3000);
                    }
                }
            });
        })();
    </script>
</body>
</html>
}

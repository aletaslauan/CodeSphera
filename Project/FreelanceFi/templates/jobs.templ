package templates

// Use standard Go import syntax
import (
	"freelancefi/db"
	"fmt"
	"strconv"
	"strings"
	"math/big"
)

templ JobsPage(username string, jobs []db.Job, limit, offset, prevOffset, nextOffset, currentPage, totalPages int){
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<title>Jobs - FreelanceFi</title>
			<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
			<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet"/>
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
			<style>
				body { margin: 0; padding: 0; height: 100vh; }
				#profileDropdown::after { display: none; }
				#profileDropdown:focus { box-shadow: none; }
				.dropdown-menu.show { display: block; }
				.card-text { display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; min-height: 60px; }
			</style>
		</head>
		<body class="bg-light">
			<!-- Top Navbar -->
			<nav class="navbar navbar-expand-lg navbar-dark bg-dark shadow-sm border-bottom px-4 py-2 mb-0">
				<div class="container-fluid">
					<a class="navbar-brand fw-bold text-white" href="/home" style="margin-right: 60px; font-size: 1.75rem;">FreelanceFi</a>
					<form class="d-flex" role="search">
						<div class="input-group" style="width: 450px; height: 44px;">
							<span class="input-group-text bg-white border-end-0 rounded-start-pill px-3"><i class="bi bi-search"></i></span>
							<input type="search" class="form-control border-start-0 rounded-end-pill px-3" placeholder="Search jobs..." aria-label="Search"/>
						</div>
					</form>
					<div class="d-flex align-items-center gap-3 ms-auto">
						<a href="/messages" class="text-white"><i class="bi bi-envelope fs-5"></i></a>
						<a href="/saved" class="text-white"><i class="bi bi-bookmark fs-5"></i></a>
						<a href="/notifications" class="text-white"><i class="bi bi-bell fs-5"></i></a>
						<div class="dropdown position-relative" id="profileDropdownWrapper">
							<button class="btn btn-outline-light rounded-circle text-uppercase fw-bold" type="button" id="profileDropdown" style="width: 40px; height: 40px;">
								if len(username) > 0 {
									{ strings.ToUpper(string(username[0])) }
								} else {
									{ "?" }
								}
							</button>
							<ul class="dropdown-menu position-absolute end-0 mt-2" aria-labelledby="profileDropdown" style="min-width: 180px;">
								<li><a class="dropdown-item" href="/profile"><i class="bi bi-person me-2"></i>Profile</a></li>
								<li><a class="dropdown-item" href="/settings"><i class="bi bi-gear me-2"></i>Settings</a></li>
								<li><hr class="dropdown-divider"/></li>
								<li><a class="dropdown-item text-danger" href="/logout"><i class="bi bi-box-arrow-right me-2"></i>Log out</a></li>
							</ul>
						</div>
					</div>
				</div>
			</nav>

			<!-- Layout: Sidebar + Main Content -->
			<div class="d-flex" style="height: calc(100vh - 64px);">
				<!-- Sidebar -->
				<div class="bg-dark text-white d-flex flex-column p-3" style="width: 250px; flex-shrink: 0;">
					<ul class="nav flex-column mb-auto">
						<li class="nav-item mb-2"><a class="nav-link text-white" href="/home">Home</a></li>
						<li class="nav-item mb-2"><a class="nav-link text-white active" aria-current="page" href="/jobspage">Jobs</a></li>
						<li class="nav-item mb-2"><a class="nav-link text-white" href="/mywork">My Work</a></li>
						<li class="nav-item mb-2"><a class="nav-link text-white" href="/finance">Finance</a></li>
					</ul>
					<div class="mt-4"><a class="btn btn-secondary w-100" href="/logout">Logout</a></div>
				</div>

				<!-- Main Content -->
				<div class="flex-grow-1 overflow-auto p-4">
					<h2 class="mb-4">Available Jobs</h2>
					<p class="text-center text-muted">Page {strconv.Itoa(currentPage)} / {strconv.Itoa(totalPages)}</p>
					<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
						if len(jobs) == 0 {
							<div class="col-12"><p class="text-center text-muted">No jobs available at the moment.</p></div>
						} else {
							for _, job := range jobs {
								<div class="col">
									<div class="card h-100 shadow-sm">
										<div class="card-body d-flex flex-column">
											<h5 class="card-title">{ job.Title }</h5>
											<p class="card-text text-muted small mb-2">
												if (job.BudgetMin.Valid && job.BudgetMin.Int.Cmp(big.NewInt(0)) != 0) || (job.BudgetMax.Valid && job.BudgetMax.Int.Cmp(big.NewInt(0)) != 0) {
													{ " â€¢ " + fmt.Sprintf("Budget: $%v - $%v", job.BudgetMin, job.BudgetMax) }
												}
											</p>
											<p class="card-text flex-grow-1">
												if job.Description != "" {
													{ job.Description }
												} else {
													{ "No description provided." }
												}
											</p>
											<a href={ templ.SafeURL(fmt.Sprintf("/jobspage/%d", job.ID)) } class="btn btn-dark btn-sm mt-auto">View Job</a>
										</div>
									</div>
								</div>
							}
						}
					</div>

					<!-- Pagination Number Links -->
					<nav aria-label="Page navigation" class="mt-4">
						<ul class="pagination justify-content-center">
							<li class="page-item">
								<a class="page-link" href={ templ.SafeURL(fmt.Sprintf("/jobspage?limit=%d&offset=%d", limit, prevOffset)) }>Previous</a>
							</li>
							for i := 1; i <= totalPages; i++ {
								<li class="page-item if i == currentPage { active }">
									<a class="page-link" href={ templ.SafeURL(fmt.Sprintf("/jobspage?limit=%d&offset=%d", limit, (i-1)*limit)) }>{ strconv.Itoa(i) }</a>
								</li>
							}
							<li class="page-item">
								<a class="page-link" href={ templ.SafeURL(fmt.Sprintf("/jobspage?limit=%d&offset=%d", limit, nextOffset)) }>Next</a>
							</li>
						</ul>
					</nav>
				</div>
			</div>

			<!-- JS: Dropdown hover -->
			<script>
        document.addEventListener("DOMContentLoaded", function () {
            const dropdown = document.querySelector("#profileDropdownWrapper");
            const menu = dropdown.querySelector(".dropdown-menu");

            let timeout;

            dropdown.addEventListener("mouseenter", () => {
                clearTimeout(timeout);
                menu.classList.add("show");
            });

            dropdown.addEventListener("mouseleave", () => {
                timeout = setTimeout(() => {
                    menu.classList.remove("show");
                }, 200);
            });
        });
        </script>
		</body>
	</html>
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: jobs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countOpenJobs = `-- name: CountOpenJobs :one
SELECT COUNT(*) FROM jobs WHERE status = 'open'
`

func (q *Queries) CountOpenJobs(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countOpenJobs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (
  client_id, category_id, title, description,
  budget_min, budget_max, deadline
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING
  id, client_id, category_id, title, description,
  budget_min, budget_max, deadline, status,
  created_at, updated_at
`

type CreateJobParams struct {
	ClientID    int32          `json:"client_id"`
	CategoryID  int32          `json:"category_id"`
	Title       string         `json:"title"`
	Description string         `json:"description"`
	BudgetMin   pgtype.Numeric `json:"budget_min"`
	BudgetMax   pgtype.Numeric `json:"budget_max"`
	Deadline    pgtype.Date    `json:"deadline"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, createJob,
		arg.ClientID,
		arg.CategoryID,
		arg.Title,
		arg.Description,
		arg.BudgetMin,
		arg.BudgetMax,
		arg.Deadline,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.CategoryID,
		&i.Title,
		&i.Description,
		&i.BudgetMin,
		&i.BudgetMax,
		&i.Deadline,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs WHERE id = $1
`

func (q *Queries) DeleteJob(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteJob, id)
	return err
}

const getJobByID = `-- name: GetJobByID :one
SELECT id, client_id, category_id, title, description, budget_min, budget_max, deadline, status, created_at, updated_at
  FROM jobs
 WHERE id = $1
`

func (q *Queries) GetJobByID(ctx context.Context, id int32) (Job, error) {
	row := q.db.QueryRow(ctx, getJobByID, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.CategoryID,
		&i.Title,
		&i.Description,
		&i.BudgetMin,
		&i.BudgetMax,
		&i.Deadline,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOpenJobs = `-- name: ListOpenJobs :many
SELECT
  j.id, j.client_id, j.category_id,
  j.title, j.description,
  j.budget_min, j.budget_max, j.deadline,
  j.status, j.created_at, j.updated_at
  FROM jobs j
 WHERE j.status = 'open'
 ORDER BY j.created_at DESC
 LIMIT $1 OFFSET $2
`

type ListOpenJobsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOpenJobs(ctx context.Context, arg ListOpenJobsParams) ([]Job, error) {
	rows, err := q.db.Query(ctx, listOpenJobs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.CategoryID,
			&i.Title,
			&i.Description,
			&i.BudgetMin,
			&i.BudgetMax,
			&i.Deadline,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

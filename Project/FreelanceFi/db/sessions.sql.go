// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sessions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserSession = `-- name: CreateUserSession :exec
INSERT INTO sessions (user_id, token_hash, expires_at)
VALUES ($1, $2, $3)
`

type CreateUserSessionParams struct {
	UserID    pgtype.Int4      `json:"user_id"`
	TokenHash string           `json:"token_hash"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) error {
	_, err := q.db.Exec(ctx, createUserSession, arg.UserID, arg.TokenHash, arg.ExpiresAt)
	return err
}

const getSessionByTokenHash = `-- name: GetSessionByTokenHash :one
SELECT user_id, token_hash, expires_at FROM sessions
WHERE token_hash = $1
`

type GetSessionByTokenHashRow struct {
	UserID    pgtype.Int4      `json:"user_id"`
	TokenHash string           `json:"token_hash"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) GetSessionByTokenHash(ctx context.Context, tokenHash string) (GetSessionByTokenHashRow, error) {
	row := q.db.QueryRow(ctx, getSessionByTokenHash, tokenHash)
	var i GetSessionByTokenHashRow
	err := row.Scan(&i.UserID, &i.TokenHash, &i.ExpiresAt)
	return i, err
}

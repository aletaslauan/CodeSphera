// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transactions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listTransactionsForUser = `-- name: ListTransactionsForUser :many
SELECT id, user_id, job_id, bid_id, type, amount, recorded_at
  FROM transactions
 WHERE user_id = $1
 ORDER BY recorded_at DESC
 LIMIT $2 OFFSET $3
`

type ListTransactionsForUserParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactionsForUser(ctx context.Context, arg ListTransactionsForUserParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionsForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.JobID,
			&i.BidID,
			&i.Type,
			&i.Amount,
			&i.RecordedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordTransaction = `-- name: RecordTransaction :one
INSERT INTO transactions (user_id, job_id, bid_id, type, amount)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, job_id, bid_id, type, amount, recorded_at
`

type RecordTransactionParams struct {
	UserID int32          `json:"user_id"`
	JobID  int32          `json:"job_id"`
	BidID  int32          `json:"bid_id"`
	Type   string         `json:"type"`
	Amount pgtype.Numeric `json:"amount"`
}

func (q *Queries) RecordTransaction(ctx context.Context, arg RecordTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, recordTransaction,
		arg.UserID,
		arg.JobID,
		arg.BidID,
		arg.Type,
		arg.Amount,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JobID,
		&i.BidID,
		&i.Type,
		&i.Amount,
		&i.RecordedAt,
	)
	return i, err
}

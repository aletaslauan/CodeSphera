// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bids.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listBidsForJob = `-- name: ListBidsForJob :many
SELECT id, job_id, freelancer_id, amount, cover_letter, status, created_at
  FROM bids
 WHERE job_id = $1
 ORDER BY created_at DESC
`

func (q *Queries) ListBidsForJob(ctx context.Context, jobID int32) ([]Bid, error) {
	rows, err := q.db.Query(ctx, listBidsForJob, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bid{}
	for rows.Next() {
		var i Bid
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.FreelancerID,
			&i.Amount,
			&i.CoverLetter,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const placeBid = `-- name: PlaceBid :one
INSERT INTO bids (job_id, freelancer_id, amount, cover_letter)
VALUES ($1, $2, $3, $4)
RETURNING id, job_id, freelancer_id, amount, cover_letter, status, created_at
`

type PlaceBidParams struct {
	JobID        int32          `json:"job_id"`
	FreelancerID int32          `json:"freelancer_id"`
	Amount       pgtype.Numeric `json:"amount"`
	CoverLetter  pgtype.Text    `json:"cover_letter"`
}

func (q *Queries) PlaceBid(ctx context.Context, arg PlaceBidParams) (Bid, error) {
	row := q.db.QueryRow(ctx, placeBid,
		arg.JobID,
		arg.FreelancerID,
		arg.Amount,
		arg.CoverLetter,
	)
	var i Bid
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.FreelancerID,
		&i.Amount,
		&i.CoverLetter,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

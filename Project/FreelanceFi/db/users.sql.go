// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (username, password_hash, role)
VALUES ($1, $2, $3)
RETURNING id, username, password_hash, role
`

type AddUserParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	Role         string `json:"role"`
}

type AddUserRow struct {
	ID           int32  `json:"id"`
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	Role         string `json:"role"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (AddUserRow, error) {
	row := q.db.QueryRow(ctx, addUser, arg.Username, arg.PasswordHash, arg.Role)
	var i AddUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
	)
	return i, err
}

const selectUsers = `-- name: SelectUsers :many
SELECT id, username, password_hash, role
FROM users
`

type SelectUsersRow struct {
	ID           int32  `json:"id"`
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	Role         string `json:"role"`
}

func (q *Queries) SelectUsers(ctx context.Context) ([]SelectUsersRow, error) {
	rows, err := q.db.Query(ctx, selectUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectUsersRow{}
	for rows.Next() {
		var i SelectUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
